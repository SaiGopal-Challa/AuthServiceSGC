@page
@using AuthServiceSGC.API.Pages
@model LoginModel
@{
    ViewData["Title"] = "Login";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="~/css/login.css" />
    <title>@ViewData["Title"]</title>
</head>
<body>
    <div class="login-container">
        <h2>Login</h2>
        <form id="loginForm">
            <div class="form-group">
                <label for="username">Username</label>
                <input type="text" id="username" name="username" required />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" id="password" name="password" required />
            </div>
            <button type="submit">Login</button>
        </form>

        <div id="otpSection" style="display:none;">
            <h3>Enter OTP</h3>
            <div class="form-group">
                <label for="otp">OTP</label>
                <input type="text" id="otp" name="otp" />
            </div>
            <button id="sendOtpButton" onclick="sendOtp()">Send OTP</button>
            <button id="resendOtpButton" style="display:none;" disabled>Resend OTP</button>
        </div>
    </div>

    <script>
        document.getElementById("loginForm").addEventListener("submit", async function (event) {
            event.preventDefault();
            const username = document.getElementById("username").value;
            const password = document.getElementById("password").value;

            try {
                const response = await fetch('api/Auth/Login', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ username, password })
                });

                const result = await response.json();

                if (response.ok) {
                    if (result.loginType === 1) {
                        document.getElementById('otpSection').style.display = 'block';
                        startOtpTimer();
                    } else {
                        alert('Login successful, no OTP required.');
                    }
                } else {
                    throw new Error(result.message || 'Invalid username or password.');
                }
            } catch (error) {
                console.error('Login failed:', error);
                alert('Login failed: ' + error.message);
            }
        });

        function sendOtp() {
            const username = document.getElementById('username').value;

            fetch('/api/sendOtp', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ username })
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Error sending OTP.');
                    }
                    return response.json();
                })
                .then(data => {
                    alert('OTP sent successfully!');
                })
                .catch(error => {
                    alert('Error: ' + error.message);
                });
        }

        function startOtpTimer() {
            let countdown = 60;
            const resendOtpButton = document.getElementById('resendOtpButton');
            resendOtpButton.style.display = 'inline-block';
            resendOtpButton.disabled = true;

            const interval = setInterval(() => {
                countdown--;
                if (countdown <= 0) {
                    clearInterval(interval);
                    resendOtpButton.disabled = false;
                    resendOtpButton.textContent = 'Resend OTP';
                }
            }, 1000);
        }
    </script>
</body>
</html>
